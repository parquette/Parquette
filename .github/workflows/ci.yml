name: CI

env:
  APP_NAME: Parquette
  TEST_NAME: SwiftArrow
  TEAM_ID: 2HFBY6N8ZN

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # run at 6AM & 6PM UTC
    - cron:  '0 6,18 * * *'

jobs:
  Build:
    runs-on: macos-latest
    environment: Signing
    timeout-minutes: 120
    steps:
      - name: "Checkout Project"
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: SwiftArrow Tests
        run: xcodebuild test -scheme ${{ TEST_NAME }}

      # seems to hang on CI image…
      #- name: Parquette Tests
      #  run: xcodebuild test -scheme Parquette

      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1
        with:
          scheme: ${{ APP_NAME }}

      - name: "Import Certificate: Distribution"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      # seems to be missing the teamID, so we just do it manually below…
      #- name: "Export & Sign Release Build"
      #  uses: devbotsxyz/xcode-export-archive@master
      #  with:
      #    scheme: ${{ APP_NAME }}

      - name: "Create exportOptions.plist"
        run: 
          echo '<plist version="1.0"><dict><key>method</key><string>developer-id</string><key>teamID</key><string>${{ TEAM_ID }}</string></dict></plist>' > ParquetteExportOptions.plist
          
      - name: "Export & Sign Release Build"
        run: 
          xcodebuild -exportArchive -archivePath "${{ APP_NAME }}.xcarchive" -exportPath Export -exportOptionsPlist "${{ APP_NAME }}ExportOptions.plist"

      - name: "Notarize Release Build"
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: "Export/${{ APP_NAME }}.app"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Staple Release Build"
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "Export/${{ APP_NAME }}.app"
          verbose: true

      - name: Package for Distribution
        run: ditto -c -k --keepParent "Export/${{ APP_NAME }}.app" "${{ APP_NAME }}.zip"

      - name: Upload Build Artifact Zip
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: ${{ APP_NAME }}.zip
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: true
                  
      - name: Upload Build Release Zip
        id: upload-manifest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ APP_NAME }}.zip
          asset_content_type: application/zip


      #- name: Archive production artifacts
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: dist-without-markdown
      #    path: |
      #      dist
      #      !dist/**/*.md
            
      #- name: Archive code coverage results
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: code-coverage-report
      #    path: output/test/code-coverage.html

      #- name: Release app
      #  uses: softprops/action-gh-release@v1
      #  if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #    files: Parquette.zip
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
